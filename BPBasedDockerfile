# this image mimics cuda install on buildpack-deps base. 
# previous verions mimicked buildpack-deps on a cudagl base, but nvidia has
# at least temporariliy suspended publishing images.

FROM buildpack-deps:22.04 as base

# environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV LANG=en_US.UTF-8
ENV PASSWORD password
ENV SHELL=/bin/bash
ENV WORKSPACE=/tmp/workspace/buildpack-deps-cuda
# nvidia-container-runtime

# this may not be necessary but may give insight on source files
COPY . ${WORKSPACE}/

## maybe this method?
# https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_network

# curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/spotify.gpg
# RUN curl -sS https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb | gpg --dearmor | tee /etc/apt/trusted.gpg.d/cuda-ubuntu2204.gpg
# curl -sS https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb | dpkg -i -

    # wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
    # dpkg -i cuda-keyring_1.0-1_all.deb && \
    # apt-get update 
    # && \
    # apt-get -y install \
    # cuda

ENV PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}
# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

RUN cd /tmp && \
    curl -fsSLO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get update

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-11-8=${NV_CUDA_CUDART_VERSION} \
    ${NV_CUDA_COMPAT_PACKAGE} \
    && ln -s cuda-11.8 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*



    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*





# RUN cd /tmp && \
#     wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
#     dpkg -i cuda-keyring_1.0-1_all.deb && \
#     apt-get update && \
#     apt-get -y install \
#     cuda






# docker run -dit --name bpd --gpus all ericsgagnon/buildpack-deps-cuda:cuda11-ubuntu22.04 


# apt-get update && apt-get install -y --no-install-recommends \
#     python3-dev \
#     python3-pip

# # pip install -U --user pip numpy wheel packaging requests opt_einsum
# # pip install -U --user keras_preprocessing --no-deps

# wget -O /usr/local/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v1.14.0/bazelisk-linux-amd64
# chmod +x /usr/local/bin/bazel

# /usr/local/cuda/lib64/


# RUN [[ "${ARCH}" = "ppc64le" ]] || { apt-get update && \
#         apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub && \
#         echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /"  > /etc/apt/sources.list.d/tensorRT.list && \
#         apt-get update && \
#         apt-get install -y --no-install-recommends libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.0 \
#         libnvinfer-dev=${LIBNVINFER}+cuda11.0 \
#         libnvinfer-plugin-dev=${LIBNVINFER}+cuda11.0 \
#         libnvinfer-plugin${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda11.0 \
#         && apt-get clean \
#         && rm -rf /var/lib/apt/lists/*; }

# python3 -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"
# python -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"

# apt-get install --no-install-recommends \
# libnvinfer7 \
# libnvinfer-dev \
# libnvinfer-plugin7 \
# libnvinfer-plugin-dev 


# wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb && \
#     dpkg -i cuda-keyring_1.0-1_all.deb && \
#     apt-get update 

#     https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb


#     libnvinfer-dev libnvinfer8 libnvinfer-plugin8 libnvinfer-samples libnvinfer-bin
